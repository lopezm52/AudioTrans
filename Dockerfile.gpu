# Multi-stage build for GPU-optimized AudioTrans
# Stage 1: Build dependencies
FROM nvidia/cuda:11.8-devel-ubuntu22.04 as builder

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    ffmpeg \
    git \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python3.11 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip
RUN pip install --upgrade pip setuptools wheel

# Copy requirements and install Python dependencies
COPY requirements.txt .

# Install PyTorch with CUDA support first
RUN pip install torch==2.1.2+cu118 torchaudio==2.1.2+cu118 --extra-index-url https://download.pytorch.org/whl/cu118

# Install remaining requirements
RUN pip install --no-cache-dir -r requirements.txt

# Stage 2: Runtime image
FROM nvidia/cuda:11.8-runtime-ubuntu22.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    python3.11 \
    python3.11-venv \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user for security
RUN groupadd -r appuser && \
    useradd -r -g appuser -d /home/appuser -s /bin/bash -c "App User" appuser && \
    mkdir -p /home/appuser/.cache/whisper && \
    mkdir -p /app && \
    chown -R appuser:appuser /home/appuser /app

# Switch to non-root user
USER appuser
WORKDIR /app

# Copy application code
COPY --chown=appuser:appuser app.py .
COPY --chown=appuser:appuser .env* ./

# GPU and performance environment variables
ENV CUDA_VISIBLE_DEVICES=0
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV WHISPER_CACHE_DIR=/home/appuser/.cache/whisper
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV OMP_NUM_THREADS=4

# Pre-download Whisper model to speed up first run
RUN python3.11 -c "import whisper; whisper.load_model('medium')"

# Expose port
EXPOSE 8001

# Health check optimized for GPU
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD python3.11 -c "import requests; requests.get('http://localhost:8001/health', timeout=25)"

# Run the application with optimized settings
CMD ["python3.11", "-m", "uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8001", "--workers", "1"] 